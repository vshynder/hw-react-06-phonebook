{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/ContactList.js","components/Alert.js","actions.js","App.js","reducers/contactReducer.js","reducers/filterReducer.js","reducers/mountedReducer.js","reducers/alertShownReducer.js","reducers/alertMessageReducer.js","reducers/index.js","index.js"],"names":["Filter","props","className","id","onChange","filterChange","value","filterVal","ContactForm","state","name","number","handleChange","e","setState","target","handleSubmit","preventDefault","formSubmit","onSubmit","this","type","React","Component","ContactListItem","contactId","remove","onClick","ContactList","useEffect","localStorage","setItem","JSON","stringify","contacts","TransitionGroup","component","filter","map","contact","CSSTransition","key","timeout","classNames","toLowerCase","includes","Alert","isShown","info","in","style","display","loadFromLS","createAction","ls","getItem","parse","payload","data","addContact","shortid","generate","removeContact","toggleMounted","toggleAlertVisibility","toggleAlertMessage","App","trim","find","handleAlert","onFormSubmit","message","handleAlertChange","handleAlertVisibility","setTimeout","isMounted","mountOnEnter","length","handleFilter","isAlertShown","alertMessage","connect","dispatch","actions","initialState","contactReducer","createReducer","action","filterReducer","mountedReducer","alertShownReducer","alertMessageReducer","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cc1020d.chunk.js","sourcesContent":["import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst Filter = (props) => {\n  return (\n    <div className=\"filter\">\n      <p className=\"filter__title\">Find contacts by name</p>\n      <input\n        className=\"filter__input\"\n        id=\"filter\"\n        onChange={props.filterChange}\n        value={props.filterVal}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n  filterVal: PropTypes.string,\n};\n\nexport default Filter;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends React.Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.formSubmit(this.state);\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form__name\">\n          Name\n          <input\n            className=\"form__name--input\"\n            id=\"name\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.name}\n          />\n        </label>\n        <label className=\"form__number\">\n          Number\n          <input\n            className=\"form__number--input\"\n            id=\"number\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.number}\n          />\n        </label>\n        <button className=\"form__submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  formSubmit: PropTypes.func,\n};\n","import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport PropTypes from \"prop-types\";\n\nconst LS_KEY = \"react-hw-3\";\n\nconst ContactList = (props) => {\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, JSON.stringify(props.contacts));\n  }, [props.contacts]);\n\n  return (\n    <TransitionGroup component=\"ul\" className=\"contact-list\">\n      {props.filter === \"\"\n        ? props.contacts.map((contact) => (\n            <CSSTransition\n              key={contact.id}\n              timeout={250}\n              classNames=\"contact-list__item\"\n            >\n              <ContactListItem\n                contactId={contact.id}\n                name={contact.name}\n                number={contact.number}\n                remove={props.remove}\n              />\n            </CSSTransition>\n          ))\n        : props.contacts\n            .filter((contact) =>\n              contact.name.toLowerCase().includes(props.filter.toLowerCase())\n            )\n            .map((contact) => (\n              <CSSTransition\n                key={contact.id}\n                timeout={250}\n                classNames=\"contact-list__item\"\n              >\n                <ContactListItem\n                  key={contact.id}\n                  contactId={contact.id}\n                  name={contact.name}\n                  number={contact.number}\n                  remove={props.remove}\n                />\n              </CSSTransition>\n            ))}\n    </TransitionGroup>\n  );\n};\n\nconst ContactListItem = ({ contactId, name, number, remove }) => (\n  <li className=\"contact-list__item\">\n    <div className=\"contact-list__item--cont\">\n      <span className=\"contact-list__item--span\">{name}</span>\n      <span className=\"contact-list__item--span\">{number}</span>\n    </div>\n\n    <button\n      className=\"contact-list__remove\"\n      onClick={() => {\n        remove(contactId);\n      }}\n    >\n      {/* <div className=\"contact-list__x-left\"></div>\n      <div className=\"contact-list__x-right\"></div> */}\n    </button>\n  </li>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  remove: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Alert = ({ isShown, info }) => (\n  <CSSTransition\n    timeout={250}\n    classNames=\"alert\"\n    in={isShown}\n    style={{ display: isShown ? \"block\" : \"none\" }}\n  >\n    <div className=\"alert\">{info}</div>\n  </CSSTransition>\n);\n\nexport default Alert;\n\nAlert.propTypes = {\n  isShown: PropTypes.bool,\n  info: PropTypes.string,\n};\n","import shortid from \"shortid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const loadFromLS = createAction(\"ADD_FORM_LS\", (key) => {\n  const ls = localStorage.getItem(key);\n  const contacts = JSON.parse(ls);\n  return {\n    payload: {\n      data: contacts ? contacts : null,\n    },\n  };\n});\n\nexport const addContact = createAction(\"ADD_CONTACT\", ({ name, number }) => {\n  return {\n    payload: {\n      name,\n      number,\n      id: shortid.generate(),\n    },\n  };\n});\n\nexport const removeContact = createAction(\"REMOVE_CONTACT\", (id) => {\n  return {\n    payload: {\n      id,\n    },\n  };\n});\n\nexport const filter = createAction(\"FILTER\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nexport const toggleMounted = createAction(\"TOGGLE_MOUNTED\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\nexport const toggleAlertVisibility = createAction(\n  \"TOGGLE_ALERT_VISIBILITY\",\n  (value) => {\n    return {\n      payload: {\n        value,\n      },\n    };\n  }\n);\n\nexport const toggleAlertMessage = createAction(\n  \"TOGGLE_ALERT_MESSAGE\",\n  (value) => {\n    return {\n      payload: {\n        value,\n      },\n    };\n  }\n);\n","import React from \"react\";\nimport Filter from \"./components/Filter\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Alert from \"./components/Alert\";\nimport \"./app.scss\";\n\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nclass App extends React.Component {\n  handleSubmit = ({ name, number }) => {\n    if (name.trim() === \"\" || number.trim() === \"\") {\n      this.handleAlert(\"Name and number must be provided.\");\n      return;\n    }\n    const check = this.props.contacts.find((contact) => contact.name === name);\n    check\n      ? this.handleAlert(\"You already have \" + name)\n      : this.props.onFormSubmit(name, number);\n  };\n\n  handleAlert(message) {\n    this.props.handleAlertChange(message);\n    this.props.handleAlertVisibility(true);\n    setTimeout(() => {\n      this.props.handleAlertVisibility(false);\n    }, 3000);\n  }\n\n  componentDidMount() {\n    this.props.toggleMounted(true);\n  }\n\n  render() {\n    return (\n      <div className=\"phonebook\">\n        <CSSTransition\n          in={this.props.isMounted}\n          timeout={500}\n          classNames=\"title\"\n          mountOnEnter\n        >\n          <h2 className=\"title\">Phonebook</h2>\n        </CSSTransition>\n        <ContactForm formSubmit={this.handleSubmit} />\n        {this.props.contacts.length > 1 ? (\n          <Filter\n            filterChange={this.props.handleFilter}\n            filterVal={this.props.filter}\n          />\n        ) : null}\n\n        <ContactList\n          filter={this.props.filter}\n          contacts={this.props.contacts}\n          remove={this.props.removeContact}\n        />\n        <Alert\n          isShown={this.props.isAlertShown}\n          info={this.props.alertMessage}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isMounted: state.isMounted,\n  contacts: state.contacts,\n  filter: state.filter,\n  isAlertShown: state.isAlertShown,\n  alertMessage: state.alertMessage,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFormSubmit: (name, number) =>\n      dispatch(actions.addContact({ name, number })),\n    removeContact: (id) => dispatch(actions.removeContact(id)),\n    toggleMounted: (value) => dispatch(actions.toggleMounted(value)),\n    handleFilter: (e) => dispatch(actions.filter(e.target.value)),\n    handleAlertChange: (message) =>\n      dispatch(actions.toggleAlertMessage(message)),\n    handleAlertVisibility: (value) =>\n      dispatch(actions.toggleAlertVisibility(value)),\n    loadFromLS: (key) => dispatch(actions.loadFromLS(key)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { addContact, removeContact } from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nconst LS_KEY = \"react-hw-3\";\n\nconst initialState = JSON.parse(localStorage.getItem(LS_KEY));\n\nexport const contactReducer = createReducer(initialState, {\n  [addContact.type]: (state, action) => [\n    ...state,\n    {\n      name: action.payload.name,\n      number: action.payload.number,\n      id: action.payload.id,\n    },\n  ],\n  [removeContact.type]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload.id),\n});\n","import { filter } from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const filterReducer = createReducer(\"\", {\n  [filter.type]: (state, action) => action.payload.value,\n});\n","import { toggleMounted } from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const mountedReducer = createReducer(false, {\n  [toggleMounted.type]: (state, action) => action.payload.value,\n});\n","import { toggleAlertVisibility } from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertShownReducer = createReducer(false, {\n  [toggleAlertVisibility.type]: (state, action) => action.payload.value,\n});\n","import { toggleAlertMessage } from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertMessageReducer = createReducer(\"\", {\n  [toggleAlertMessage.type]: (state, action) => action.payload.value,\n});\n","import { combineReducers } from \"redux\";\n\nimport { contactReducer } from \"./contactReducer\";\nimport { filterReducer } from \"./filterReducer\";\nimport { mountedReducer } from \"./mountedReducer\";\nimport { alertShownReducer } from \"./alertShownReducer\";\nimport { alertMessageReducer } from \"./alertMessageReducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactReducer,\n  filter: filterReducer,\n  isMounted: mountedReducer,\n  isAlertShown: alertShownReducer,\n  alertMessage: alertMessageReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}